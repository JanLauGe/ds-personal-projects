select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(pc_balance); gc()
sum_prev <- prev %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(DAYS_FIRST_DRAWING = ifelse(DAYS_FIRST_DRAWING == 365243, NA, DAYS_FIRST_DRAWING),
DAYS_FIRST_DUE = ifelse(DAYS_FIRST_DUE == 365243, NA, DAYS_FIRST_DUE),
DAYS_LAST_DUE_1ST_VERSION = ifelse(DAYS_LAST_DUE_1ST_VERSION == 365243, NA, DAYS_LAST_DUE_1ST_VERSION),
DAYS_LAST_DUE = ifelse(DAYS_LAST_DUE == 365243, NA, DAYS_LAST_DUE),
DAYS_TERMINATION = ifelse(DAYS_TERMINATION == 365243, NA, DAYS_TERMINATION),
APP_CREDIT_PERC = AMT_APPLICATION / AMT_CREDIT) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
rm(prev); gc()
tri <- 1:nrow(tr)
y <- tr$TARGET
tr_te <- tr %>%
select(-TARGET) %>%
bind_rows(te) %>%
left_join(sum_bureau, by = "SK_ID_CURR") %>%
left_join(sum_cc_balance, by = "SK_ID_CURR") %>%
left_join(sum_payments, by = "SK_ID_CURR") %>%
left_join(sum_pc_balance, by = "SK_ID_CURR") %>%
left_join(sum_prev, by = "SK_ID_CURR") %>%
select(-SK_ID_CURR) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(na = apply(., 1, function(x) sum(is.na(x))),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED == 365243, NA, DAYS_EMPLOYED),
DAYS_EMPLOYED_PERC = sqrt(DAYS_EMPLOYED / DAYS_BIRTH),
INCOME_CREDIT_PERC = AMT_INCOME_TOTAL / AMT_CREDIT,
INCOME_PER_PERSON = log1p(AMT_INCOME_TOTAL / CNT_FAM_MEMBERS),
ANNUITY_INCOME_PERC = sqrt(AMT_ANNUITY / (1 + AMT_INCOME_TOTAL)),
LOAN_INCOME_RATIO = AMT_CREDIT / AMT_INCOME_TOTAL,
ANNUITY_LENGTH = AMT_CREDIT / AMT_ANNUITY,
CHILDREN_RATIO = CNT_CHILDREN / CNT_FAM_MEMBERS,
CREDIT_TO_GOODS_RATIO = AMT_CREDIT / AMT_GOODS_PRICE,
INC_PER_CHLD = AMT_INCOME_TOTAL / (1 + CNT_CHILDREN),
SOURCES_PROD = EXT_SOURCE_1 * EXT_SOURCE_2 * EXT_SOURCE_3,
CAR_TO_BIRTH_RATIO = OWN_CAR_AGE / DAYS_BIRTH,
CAR_TO_EMPLOY_RATIO = OWN_CAR_AGE / DAYS_EMPLOYED,
PHONE_TO_BIRTH_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_BIRTH,
PHONE_TO_EMPLOY_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_EMPLOYED)
docs <- str_subset(names(tr), "FLAG_DOC")
live <- str_subset(names(tr), "(?!NFLAG_)(?!FLAG_DOC)(?!_FLAG_)FLAG_")
inc_by_org <- tr_te %>%
group_by(ORGANIZATION_TYPE) %>%
summarise(m = median(AMT_INCOME_TOTAL)) %$%
setNames(as.list(m), ORGANIZATION_TYPE)
rm(tr, te, fn, sum_bureau, sum_cc_balance,
sum_payments, sum_pc_balance, sum_prev); gc()
tr_te %<>%
mutate(DOC_IND_KURT = apply(tr_te[, docs], 1, moments::kurtosis),
LIVE_IND_SUM = apply(tr_te[, live], 1, sum),
NEW_INC_BY_ORG = recode(tr_te$ORGANIZATION_TYPE, !!!inc_by_org),
NEW_EXT_SOURCES_MEAN = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, mean),
NEW_SCORES_STD = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, sd))%>%
mutate_all(funs(ifelse(is.nan(.), NA, .))) %>%
mutate_all(funs(ifelse(is.infinite(.), NA, .)))
head(tr_te)
dim(tr_te)
tri
tr_te[tri,]
tr_te[tri,'trainset'] <- 1
tr_te$trainset
tr_te$trainset %>% summary
tr_te$y
NAME_CONTRACT_STATUS_mean.x
tr_te$NAME_CONTRACT_STATUS_mean.x
tr_te$NAME_CONTRACT_STATUS_mean.y
tr_te$NAME_CONTRACT_STATUS_mean.x
tr_te$NAME_CONTRACT_STATUS_mean.y
library(tidyverse)
library(xgboost)
library(magrittr)
set.seed(0)
#---------------------------
cat("Loading data...\n")
bbalance <- read_csv("data/bureau_balance.csv")
bureau <- read_csv("data/bureau.csv")
cc_balance <- read_csv("data/credit_card_balance.csv")
payments <- read_csv("data/installments_payments.csv")
pc_balance <- read_csv("data/POS_CASH_balance.csv")
prev <- read_csv("data/previous_application.csv")
tr <- read_csv("data/application_train.csv")
te <- read_csv("data/application_test.csv")
dim(tr_te[tri,'trainset'])
length(y)
fn <- funs(mean, sd, min, max, sum, n_distinct, .args = list(na.rm = TRUE))
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn) %>%
set_colnames(., str_c('bbalance_', colnames(.)))
#rm(bbalance); gc()
sum_bureau <- bureau %>%
left_join(sum_bbalance, by = "SK_ID_BUREAU") %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('bureau_', colnames(.)))
#rm(bureau, sum_bbalance); gc()
sum_cc_balance <- cc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('ccbalance_', colnames(.)))
#rm(cc_balance); gc()
sum_payments <- payments %>%
select(-SK_ID_PREV) %>%
mutate(PAYMENT_PERC = AMT_PAYMENT / AMT_INSTALMENT,
PAYMENT_DIFF = AMT_INSTALMENT - AMT_PAYMENT,
DPD = DAYS_ENTRY_PAYMENT - DAYS_INSTALMENT,
DBD = DAYS_INSTALMENT - DAYS_ENTRY_PAYMENT,
DPD = ifelse(DPD > 0, DPD, 0),
DBD = ifelse(DBD > 0, DBD, 0)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('payments_', colnames(.)))
#rm(payments); gc()
sum_pc_balance <- pc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('pc_balance', colnames(.)))
#rm(pc_balance); gc()
sum_prev <- prev %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(DAYS_FIRST_DRAWING = ifelse(DAYS_FIRST_DRAWING == 365243, NA, DAYS_FIRST_DRAWING),
DAYS_FIRST_DUE = ifelse(DAYS_FIRST_DUE == 365243, NA, DAYS_FIRST_DUE),
DAYS_LAST_DUE_1ST_VERSION = ifelse(DAYS_LAST_DUE_1ST_VERSION == 365243, NA, DAYS_LAST_DUE_1ST_VERSION),
DAYS_LAST_DUE = ifelse(DAYS_LAST_DUE == 365243, NA, DAYS_LAST_DUE),
DAYS_TERMINATION = ifelse(DAYS_TERMINATION == 365243, NA, DAYS_TERMINATION),
APP_CREDIT_PERC = AMT_APPLICATION / AMT_CREDIT) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('prev_', colnames(.)))
#rm(prev); gc()
tri <- 1:nrow(tr)
y <- tr$TARGET
tr_te <- tr %>%
select(-TARGET) %>%
bind_rows(te) %>%
left_join(sum_bureau, by = "SK_ID_CURR") %>%
left_join(sum_cc_balance, by = "SK_ID_CURR") %>%
left_join(sum_payments, by = "SK_ID_CURR") %>%
left_join(sum_pc_balance, by = "SK_ID_CURR") %>%
left_join(sum_prev, by = "SK_ID_CURR") %>%
select(-SK_ID_CURR) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(na = apply(., 1, function(x) sum(is.na(x))),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED == 365243, NA, DAYS_EMPLOYED),
DAYS_EMPLOYED_PERC = sqrt(DAYS_EMPLOYED / DAYS_BIRTH),
INCOME_CREDIT_PERC = AMT_INCOME_TOTAL / AMT_CREDIT,
INCOME_PER_PERSON = log1p(AMT_INCOME_TOTAL / CNT_FAM_MEMBERS),
ANNUITY_INCOME_PERC = sqrt(AMT_ANNUITY / (1 + AMT_INCOME_TOTAL)),
LOAN_INCOME_RATIO = AMT_CREDIT / AMT_INCOME_TOTAL,
ANNUITY_LENGTH = AMT_CREDIT / AMT_ANNUITY,
CHILDREN_RATIO = CNT_CHILDREN / CNT_FAM_MEMBERS,
CREDIT_TO_GOODS_RATIO = AMT_CREDIT / AMT_GOODS_PRICE,
INC_PER_CHLD = AMT_INCOME_TOTAL / (1 + CNT_CHILDREN),
SOURCES_PROD = EXT_SOURCE_1 * EXT_SOURCE_2 * EXT_SOURCE_3,
CAR_TO_BIRTH_RATIO = OWN_CAR_AGE / DAYS_BIRTH,
CAR_TO_EMPLOY_RATIO = OWN_CAR_AGE / DAYS_EMPLOYED,
PHONE_TO_BIRTH_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_BIRTH,
PHONE_TO_EMPLOY_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_EMPLOYED)
docs <- str_subset(names(tr), "FLAG_DOC")
live <- str_subset(names(tr), "(?!NFLAG_)(?!FLAG_DOC)(?!_FLAG_)FLAG_")
inc_by_org <- tr_te %>%
group_by(ORGANIZATION_TYPE) %>%
summarise(m = median(AMT_INCOME_TOTAL)) %$%
setNames(as.list(m), ORGANIZATION_TYPE)
head(bureau)
bureau %>%
left_join(sum_bbalance, by = "SK_ID_BUREAU")
bureau %>%
left_join(sum_bbalance, by = c('bbalance_SK_ID_BUREAU' = "SK_ID_BUREAU")) %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('bureau_', colnames(.)))
bureau %>%
left_join(sum_bbalance, by = c("SK_ID_BUREAU" = 'bbalance_SK_ID_BUREAU')) %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('bureau_', colnames(.)))
#rm(bureau, sum_bbalance); gc()
library(tidyverse)
library(xgboost)
library(magrittr)
set.seed(0)
#---------------------------
cat("Loading data...\n")
bbalance <- read_csv("data/bureau_balance.csv")
bureau <- read_csv("data/bureau.csv")
cc_balance <- read_csv("data/credit_card_balance.csv")
payments <- read_csv("data/installments_payments.csv")
pc_balance <- read_csv("data/POS_CASH_balance.csv")
prev <- read_csv("data/previous_application.csv")
tr <- read_csv("data/application_train.csv")
te <- read_csv("data/application_test.csv")
#---------------------------
cat("Preprocessing...\n")
fn <- funs(mean, sd, min, max, sum, n_distinct, .args = list(na.rm = TRUE))
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn) %>%
set_colnames(., str_c('bbalance_', colnames(.)))
#rm(bbalance); gc()
sum_bureau <- bureau %>%
left_join(sum_bbalance, by = c("SK_ID_BUREAU" = 'bbalance_SK_ID_BUREAU')) %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('bureau_', colnames(.)))
#rm(bureau, sum_bbalance); gc()
sum_cc_balance <- cc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('ccbalance_', colnames(.)))
#rm(cc_balance); gc()
sum_payments <- payments %>%
select(-SK_ID_PREV) %>%
mutate(PAYMENT_PERC = AMT_PAYMENT / AMT_INSTALMENT,
PAYMENT_DIFF = AMT_INSTALMENT - AMT_PAYMENT,
DPD = DAYS_ENTRY_PAYMENT - DAYS_INSTALMENT,
DBD = DAYS_INSTALMENT - DAYS_ENTRY_PAYMENT,
DPD = ifelse(DPD > 0, DPD, 0),
DBD = ifelse(DBD > 0, DBD, 0)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('payments_', colnames(.)))
#rm(payments); gc()
sum_pc_balance <- pc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('pc_balance', colnames(.)))
#rm(pc_balance); gc()
sum_prev <- prev %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(DAYS_FIRST_DRAWING = ifelse(DAYS_FIRST_DRAWING == 365243, NA, DAYS_FIRST_DRAWING),
DAYS_FIRST_DUE = ifelse(DAYS_FIRST_DUE == 365243, NA, DAYS_FIRST_DUE),
DAYS_LAST_DUE_1ST_VERSION = ifelse(DAYS_LAST_DUE_1ST_VERSION == 365243, NA, DAYS_LAST_DUE_1ST_VERSION),
DAYS_LAST_DUE = ifelse(DAYS_LAST_DUE == 365243, NA, DAYS_LAST_DUE),
DAYS_TERMINATION = ifelse(DAYS_TERMINATION == 365243, NA, DAYS_TERMINATION),
APP_CREDIT_PERC = AMT_APPLICATION / AMT_CREDIT) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn) %>%
set_colnames(., str_c('prev_', colnames(.)))
#rm(prev); gc()
tri <- 1:nrow(tr)
y <- tr$TARGET
tr_te <- tr %>%
select(-TARGET) %>%
bind_rows(te) %>%
left_join(sum_bureau, by = "SK_ID_CURR") %>%
left_join(sum_cc_balance, by = "SK_ID_CURR") %>%
left_join(sum_payments, by = "SK_ID_CURR") %>%
left_join(sum_pc_balance, by = "SK_ID_CURR") %>%
left_join(sum_prev, by = "SK_ID_CURR") %>%
select(-SK_ID_CURR) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(na = apply(., 1, function(x) sum(is.na(x))),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED == 365243, NA, DAYS_EMPLOYED),
DAYS_EMPLOYED_PERC = sqrt(DAYS_EMPLOYED / DAYS_BIRTH),
INCOME_CREDIT_PERC = AMT_INCOME_TOTAL / AMT_CREDIT,
INCOME_PER_PERSON = log1p(AMT_INCOME_TOTAL / CNT_FAM_MEMBERS),
ANNUITY_INCOME_PERC = sqrt(AMT_ANNUITY / (1 + AMT_INCOME_TOTAL)),
LOAN_INCOME_RATIO = AMT_CREDIT / AMT_INCOME_TOTAL,
ANNUITY_LENGTH = AMT_CREDIT / AMT_ANNUITY,
CHILDREN_RATIO = CNT_CHILDREN / CNT_FAM_MEMBERS,
CREDIT_TO_GOODS_RATIO = AMT_CREDIT / AMT_GOODS_PRICE,
INC_PER_CHLD = AMT_INCOME_TOTAL / (1 + CNT_CHILDREN),
SOURCES_PROD = EXT_SOURCE_1 * EXT_SOURCE_2 * EXT_SOURCE_3,
CAR_TO_BIRTH_RATIO = OWN_CAR_AGE / DAYS_BIRTH,
CAR_TO_EMPLOY_RATIO = OWN_CAR_AGE / DAYS_EMPLOYED,
PHONE_TO_BIRTH_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_BIRTH,
PHONE_TO_EMPLOY_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_EMPLOYED)
docs <- str_subset(names(tr), "FLAG_DOC")
live <- str_subset(names(tr), "(?!NFLAG_)(?!FLAG_DOC)(?!_FLAG_)FLAG_")
inc_by_org <- tr_te %>%
group_by(ORGANIZATION_TYPE) %>%
summarise(m = median(AMT_INCOME_TOTAL)) %$%
setNames(as.list(m), ORGANIZATION_TYPE)
#rm(tr, te, fn, sum_bureau, sum_cc_balance,
#   sum_payments, sum_pc_balance, sum_prev); gc()
tr_te %<>%
mutate(DOC_IND_KURT = apply(tr_te[, docs], 1, moments::kurtosis),
LIVE_IND_SUM = apply(tr_te[, live], 1, sum),
NEW_INC_BY_ORG = recode(tr_te$ORGANIZATION_TYPE, !!!inc_by_org),
NEW_EXT_SOURCES_MEAN = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, mean),
NEW_SCORES_STD = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, sd))%>%
mutate_all(funs(ifelse(is.nan(.), NA, .))) %>%
mutate_all(funs(ifelse(is.infinite(.), NA, .)))
head(sum_bbalance)
colnames(sum_bbalance)[2:ncol(sum_bbalance)]
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn) %>%
set_colnames(.[2:ncol(.)], str_c('bbalance_', colnames(.)[2:ncol(.)]))
sum_bbalance[2:ncol(sum_bbalance)] <- str_c('bbalance_', colnames(sum_bbalance)[2:ncol(sum_bbalance)])
sum_bbalance
colnames(sum_bbalance[2:ncol(sum_bbalance)]) <- str_c('bbalance_', colnames(sum_bbalance)[2:ncol(sum_bbalance)])
#---------------------------
cat("Loading data...\n")
bbalance <- read_csv("data/bureau_balance.csv")
bureau <- read_csv("data/bureau.csv")
cc_balance <- read_csv("data/credit_card_balance.csv")
payments <- read_csv("data/installments_payments.csv")
pc_balance <- read_csv("data/POS_CASH_balance.csv")
prev <- read_csv("data/previous_application.csv")
tr <- read_csv("data/application_train.csv")
te <- read_csv("data/application_test.csv")
#---------------------------
cat("Preprocessing...\n")
fn <- funs(mean, sd, min, max, sum, n_distinct, .args = list(na.rm = TRUE))
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn)
#rm(bbalance); gc()
sum_bureau <- bureau %>%
left_join(sum_bbalance, by = c("SK_ID_BUREAU" = 'bbalance_SK_ID_BUREAU')) %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
#rm(bureau, sum_bbalance); gc()
sum_cc_balance <- cc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
library(tidyverse)
library(xgboost)
library(magrittr)
set.seed(0)
#---------------------------
cat("Loading data...\n")
bbalance <- read_csv("data/bureau_balance.csv")
bureau <- read_csv("data/bureau.csv")
cc_balance <- read_csv("data/credit_card_balance.csv")
payments <- read_csv("data/installments_payments.csv")
pc_balance <- read_csv("data/POS_CASH_balance.csv")
prev <- read_csv("data/previous_application.csv")
tr <- read_csv("data/application_train.csv")
te <- read_csv("data/application_test.csv")
#---------------------------
cat("Preprocessing...\n")
fn <- funs(mean, sd, min, max, sum, n_distinct, .args = list(na.rm = TRUE))
sum_bbalance <- bbalance %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_BUREAU) %>%
summarise_all(fn)
#rm(bbalance); gc()
sum_bureau <- bureau %>%
left_join(sum_bbalance, by = "SK_ID_BUREAU") %>%
select(-SK_ID_BUREAU) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
#rm(bureau, sum_bbalance); gc()
sum_cc_balance <- cc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
#rm(cc_balance); gc()
sum_payments <- payments %>%
select(-SK_ID_PREV) %>%
mutate(PAYMENT_PERC = AMT_PAYMENT / AMT_INSTALMENT,
PAYMENT_DIFF = AMT_INSTALMENT - AMT_PAYMENT,
DPD = DAYS_ENTRY_PAYMENT - DAYS_INSTALMENT,
DBD = DAYS_INSTALMENT - DAYS_ENTRY_PAYMENT,
DPD = ifelse(DPD > 0, DPD, 0),
DBD = ifelse(DBD > 0, DBD, 0)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
#rm(payments); gc()
sum_pc_balance <- pc_balance %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
#rm(pc_balance); gc()
sum_prev <- prev %>%
select(-SK_ID_PREV) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(DAYS_FIRST_DRAWING = ifelse(DAYS_FIRST_DRAWING == 365243, NA, DAYS_FIRST_DRAWING),
DAYS_FIRST_DUE = ifelse(DAYS_FIRST_DUE == 365243, NA, DAYS_FIRST_DUE),
DAYS_LAST_DUE_1ST_VERSION = ifelse(DAYS_LAST_DUE_1ST_VERSION == 365243, NA, DAYS_LAST_DUE_1ST_VERSION),
DAYS_LAST_DUE = ifelse(DAYS_LAST_DUE == 365243, NA, DAYS_LAST_DUE),
DAYS_TERMINATION = ifelse(DAYS_TERMINATION == 365243, NA, DAYS_TERMINATION),
APP_CREDIT_PERC = AMT_APPLICATION / AMT_CREDIT) %>%
group_by(SK_ID_CURR) %>%
summarise_all(fn)
#rm(prev); gc()
tri <- 1:nrow(tr)
y <- tr$TARGET
tr_te <- tr %>%
select(-TARGET) %>%
bind_rows(te) %>%
left_join(sum_bureau, by = "SK_ID_CURR") %>%
left_join(sum_cc_balance, by = "SK_ID_CURR") %>%
left_join(sum_payments, by = "SK_ID_CURR") %>%
left_join(sum_pc_balance, by = "SK_ID_CURR") %>%
left_join(sum_prev, by = "SK_ID_CURR") %>%
select(-SK_ID_CURR) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(na = apply(., 1, function(x) sum(is.na(x))),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED == 365243, NA, DAYS_EMPLOYED),
DAYS_EMPLOYED_PERC = sqrt(DAYS_EMPLOYED / DAYS_BIRTH),
INCOME_CREDIT_PERC = AMT_INCOME_TOTAL / AMT_CREDIT,
INCOME_PER_PERSON = log1p(AMT_INCOME_TOTAL / CNT_FAM_MEMBERS),
ANNUITY_INCOME_PERC = sqrt(AMT_ANNUITY / (1 + AMT_INCOME_TOTAL)),
LOAN_INCOME_RATIO = AMT_CREDIT / AMT_INCOME_TOTAL,
ANNUITY_LENGTH = AMT_CREDIT / AMT_ANNUITY,
CHILDREN_RATIO = CNT_CHILDREN / CNT_FAM_MEMBERS,
CREDIT_TO_GOODS_RATIO = AMT_CREDIT / AMT_GOODS_PRICE,
INC_PER_CHLD = AMT_INCOME_TOTAL / (1 + CNT_CHILDREN),
SOURCES_PROD = EXT_SOURCE_1 * EXT_SOURCE_2 * EXT_SOURCE_3,
CAR_TO_BIRTH_RATIO = OWN_CAR_AGE / DAYS_BIRTH,
CAR_TO_EMPLOY_RATIO = OWN_CAR_AGE / DAYS_EMPLOYED,
PHONE_TO_BIRTH_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_BIRTH,
PHONE_TO_EMPLOY_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_EMPLOYED)
docs <- str_subset(names(tr), "FLAG_DOC")
live <- str_subset(names(tr), "(?!NFLAG_)(?!FLAG_DOC)(?!_FLAG_)FLAG_")
inc_by_org <- tr_te %>%
group_by(ORGANIZATION_TYPE) %>%
summarise(m = median(AMT_INCOME_TOTAL)) %$%
setNames(as.list(m), ORGANIZATION_TYPE)
head(tr_te)
tr_te %<>%
mutate(DOC_IND_KURT = apply(tr_te[, docs], 1, moments::kurtosis),
LIVE_IND_SUM = apply(tr_te[, live], 1, sum),
NEW_INC_BY_ORG = recode(tr_te$ORGANIZATION_TYPE, !!!inc_by_org),
NEW_EXT_SOURCES_MEAN = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, mean),
NEW_SCORES_STD = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, sd))%>%
mutate_all(funs(ifelse(is.nan(.), NA, .))) %>%
mutate_all(funs(ifelse(is.infinite(.), NA, .)))
tr_te[tri,'trainset'] <- 1
tr_te[tri,'label'] <- y
tr_te$label
tr_te$label %>% summary
tri
library(feather)
install.packages('feather')
library(feather)
write_feather(tr_te, here::here('data/preprocessed.feather'))
tr_te <- tr %>%
select(-TARGET) %>%
bind_rows(te) %>%
left_join(sum_bureau, by = "SK_ID_CURR") %>%
left_join(sum_cc_balance, by = "SK_ID_CURR") %>%
left_join(sum_payments, by = "SK_ID_CURR") %>%
left_join(sum_pc_balance, by = "SK_ID_CURR") %>%
left_join(sum_prev, by = "SK_ID_CURR") %>%
#select(-SK_ID_CURR) %>%
mutate_if(is.character, funs(factor(.) %>% as.integer)) %>%
mutate(na = apply(., 1, function(x) sum(is.na(x))),
DAYS_EMPLOYED = ifelse(DAYS_EMPLOYED == 365243, NA, DAYS_EMPLOYED),
DAYS_EMPLOYED_PERC = sqrt(DAYS_EMPLOYED / DAYS_BIRTH),
INCOME_CREDIT_PERC = AMT_INCOME_TOTAL / AMT_CREDIT,
INCOME_PER_PERSON = log1p(AMT_INCOME_TOTAL / CNT_FAM_MEMBERS),
ANNUITY_INCOME_PERC = sqrt(AMT_ANNUITY / (1 + AMT_INCOME_TOTAL)),
LOAN_INCOME_RATIO = AMT_CREDIT / AMT_INCOME_TOTAL,
ANNUITY_LENGTH = AMT_CREDIT / AMT_ANNUITY,
CHILDREN_RATIO = CNT_CHILDREN / CNT_FAM_MEMBERS,
CREDIT_TO_GOODS_RATIO = AMT_CREDIT / AMT_GOODS_PRICE,
INC_PER_CHLD = AMT_INCOME_TOTAL / (1 + CNT_CHILDREN),
SOURCES_PROD = EXT_SOURCE_1 * EXT_SOURCE_2 * EXT_SOURCE_3,
CAR_TO_BIRTH_RATIO = OWN_CAR_AGE / DAYS_BIRTH,
CAR_TO_EMPLOY_RATIO = OWN_CAR_AGE / DAYS_EMPLOYED,
PHONE_TO_BIRTH_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_BIRTH,
PHONE_TO_EMPLOY_RATIO = DAYS_LAST_PHONE_CHANGE / DAYS_EMPLOYED)
docs <- str_subset(names(tr), "FLAG_DOC")
live <- str_subset(names(tr), "(?!NFLAG_)(?!FLAG_DOC)(?!_FLAG_)FLAG_")
inc_by_org <- tr_te %>%
group_by(ORGANIZATION_TYPE) %>%
summarise(m = median(AMT_INCOME_TOTAL)) %$%
setNames(as.list(m), ORGANIZATION_TYPE)
tr_te %<>%
mutate(DOC_IND_KURT = apply(tr_te[, docs], 1, moments::kurtosis),
LIVE_IND_SUM = apply(tr_te[, live], 1, sum),
NEW_INC_BY_ORG = recode(tr_te$ORGANIZATION_TYPE, !!!inc_by_org),
NEW_EXT_SOURCES_MEAN = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, mean),
NEW_SCORES_STD = apply(tr_te[, c("EXT_SOURCE_1", "EXT_SOURCE_2", "EXT_SOURCE_3")], 1, sd))%>%
mutate_all(funs(ifelse(is.nan(.), NA, .))) %>%
mutate_all(funs(ifelse(is.infinite(.), NA, .)))
tr_te[tri,'trainset'] <- 1
tr_te[tri,'label'] <- y
head(tr_te)
head(sum_bureau)
write_feather(tr_te, here::here('data/preprocessed2.feather'))
head(tr_te)
