as_data_frame() %>%
na.omit()
climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y)
# ggplot raster
climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y) %>%
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
# good colour palette for colour blind people
#scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = 'Climatic variables',
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
# ggplot raster
climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y) %>%
ggplot(aes(x = x, y = y, fill = value)) +
facet_wrap(~ variable) +
geom_tile() +
# good colour palette for colour blind people
#scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = 'Climatic variables',
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
# ggplot raster
climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y) %>%
ggplot(aes(x = x, y = y, fill = value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_tile() +
# good colour palette for colour blind people
#scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = 'Climatic variables',
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
# ggplot raster
clim <- climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y)
# ggplot raster
clim <- climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y) %>%
nest(.key = variable)
clim
head(clim)
# ggplot raster
clim <- climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y) %>%
group_by(variable)
clim
# ggplot raster
clim <- climate_nested$raster_stacks[[4]] %>%
as("SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit() %>%
gather(key = "variable", value = "value", -x, -y) %>%
group_by(variable) %>%
nest()
clim
clim %>%
clim %>%
mutate(plots = map(.x = data, .f = plot_clim))
plot_clim <- function(df, var) {
df %>%
ggplot(aes(x = x, y = y, fill = value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_tile() +
# good colour palette for colour blind people
#scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = var,
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
}
clim %>%
mutate(plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
gridExtra::grid.arrange(grobs = clim2$plots)
plot_clim <- function(df, var) {
df %>%
ggplot(aes(x = x, y = y, fill = value)) +
facet_wrap(~ variable, scales = "free_y") +
geom_tile() +
# good colour palette for colour blind people
#scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = var,
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
}
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2$plots[[1]]
plot_clim <- function(df, var) {
df %>%
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
# good colour palette for colour blind people
#scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = var,
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
}
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2$plots[[1]]
gridExtra::grid.arrange(grobs = clim2$plots)
library(gridExtra)
gridExtra::grid.arrange(grobs = clim2$plots)
gridExtra::grid.arrange(grobs = clim2$plots)
plot_clim <- function(df, var) {
df %>%
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_brewer(palette = "Spectral") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = var,
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
}
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2$plots[[1]]
plot_clim <- function(df, var) {
df %>%
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = var,
caption = 'Source: MetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
}
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2$plots[[1]]
plot_clim <- function(df, var) {
df %>%
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
scale_fill_distiller(palette = "Spectral") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
labs(title = var, caption = 'Source: MetOffice UK climate data')
}
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2 <- mutate(clim, plots = map2(.x = data, .y = variable, .f = plot_clim))
clim2$plots[[1]]
x <- gridExtra::grid.arrange(grobs = clim2$plots)
ggsave(x, "02_climate_plot.png")
ggsave(plot = x, filename = "02_climate_plot.png", )
?ggsave
ggsave(plot = x, filename = "02_climate_plot.png", device = "png",
width = 20, height = 15, scale = .5, dpi = 150)
ggsave(plot = x, filename = "02_climate_plot.png", device = "png",
width = 20, height = 15, scale = .1, dpi = 150)
ggsave(plot = x, filename = "02_climate_plot.png", device = "png",
width = 20, height = 15, scale = 1, dpi = 150)
ggsave(plot = x, filename = "02_climate_plot.png", device = "png",
width = 12, height = 18, scale = 1, dpi = 150)
plot(model_fit)
# for reproducibility
set.seed(12345)
library(RRF)
# set up model fitting parameters
# tuning grid, trying every possible combination
tuneGrid <- expand.grid(
mtry = c(3, 6, 9),
coefReg = c(.01, .03, .1, .3, .7, 1),
coefImp = c(.0, .1, .3, .6, 1))
tuneControl <- trainControl(
method = 'repeatedcv',
classProbs = TRUE,
number = 10,
repeats = 2,
verboseIter = TRUE,
summaryFunction = twoClassSummary)
# actual model build
model_fit <- train(
presence ~ .,
data = df_train,
method = "RRF",
metric = "ROC",
tuneGrid = tuneGrid,
trControl = tuneControl)
plot(model_fit)
# combine prediction with validation set
df_eval <- data_frame(
"obs" = df_test$presence,
"pred" = predict(
object = model_fit,
newdata = df_test,
type = "prob") %>%
pull(1))
# get ROC value
roc_auc_vec(estimator = "binary", truth = df_eval$obs, estimate = df_eval$pred)
df_eval <- df_modelling %>%
group_by(decade) %>% nest() %>%
# combine with climate data
left_join(climate_nested, by = "decade") %>%
# evaluate by decade
mutate(
"obs" = map(
.x = data,
~ .x$presence),
"pred" = map(
.x = data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence")),
"auc" = map2_dbl(
.x = obs,
.y = pred,
~ roc_auc_vec(
estimator = "binary",
truth = .x,
estimate = .y)),
"climate_data" = map(
.x = raster_stacks,
~ as(.x, "SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit()),
"habitat_suitability" = map(
.x = climate_data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence"))
)
df_eval
# remove cells with missing values in any decade
# (otherwise mismatch causes animation glitches)
no_na_data <- df_eval %>%
dplyr::select(decade, climate_data, habitat_suitability) %>%
# change nesting
unnest() %>% group_by(x, y) %>% nest() %>%
# find cells with missing values
mutate(any_na = map_lgl(
.x = data,
~ dim(.x)[[1]] == 5)) %>%
# exclude them
filter(any_na) %>%
dplyr::select(x, y, data) %>%
unnest()
# create animation cycling through decades
hs_animation <- no_na_data %>%
dplyr::select(x, y, decade, habitat_suitability) %>%
gather(key = "variable", value = "value", -x, -y, -decade) %>%
filter(variable == "habitat_suitability") %>%
# plot data
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
# good colour palette for colour blind people
scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
# animate plot, morphing through decades
transition_states(
states = decade,
transition_length = 5,
state_length = 2) +
labs(title = 'Habitat Suitability per Decade',
# gganimate: animate subtitle
subtitle = 'Decade: {closest_state}',
caption = 'Source:\nGBIF data and\nMetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
hs_animation
model_fit <- update(
object = model_fit,
param = list(mtry = 6, coefReg = .7, coefImp = .3))
df_eval <- df_modelling %>%
group_by(decade) %>% nest() %>%
# combine with climate data
left_join(climate_nested, by = "decade") %>%
# evaluate by decade
mutate(
"obs" = map(
.x = data,
~ .x$presence),
"pred" = map(
.x = data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence")),
"auc" = map2_dbl(
.x = obs,
.y = pred,
~ roc_auc_vec(
estimator = "binary",
truth = .x,
estimate = .y)),
"climate_data" = map(
.x = raster_stacks,
~ as(.x, "SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit()),
"habitat_suitability" = map(
.x = climate_data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence"))
)
df_eval
# remove cells with missing values in any decade
# (otherwise mismatch causes animation glitches)
no_na_data <- df_eval %>%
dplyr::select(decade, climate_data, habitat_suitability) %>%
# change nesting
unnest() %>% group_by(x, y) %>% nest() %>%
# find cells with missing values
mutate(any_na = map_lgl(
.x = data,
~ dim(.x)[[1]] == 5)) %>%
# exclude them
filter(any_na) %>%
dplyr::select(x, y, data) %>%
unnest()
# create animation cycling through decades
hs_animation <- no_na_data %>%
dplyr::select(x, y, decade, habitat_suitability) %>%
gather(key = "variable", value = "value", -x, -y, -decade) %>%
filter(variable == "habitat_suitability") %>%
# plot data
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
# good colour palette for colour blind people
scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
# animate plot, morphing through decades
transition_states(
states = decade,
transition_length = 5,
state_length = 2) +
labs(title = 'Habitat Suitability per Decade',
# gganimate: animate subtitle
subtitle = 'Decade: {closest_state}',
caption = 'Source:\nGBIF data and\nMetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
hs_animation
model_fit <- update(
object = model_fit,
param = list(mtry = 6, coefReg = 1, coefImp = .6))
df_eval <- df_modelling %>%
group_by(decade) %>% nest() %>%
# combine with climate data
left_join(climate_nested, by = "decade") %>%
# evaluate by decade
mutate(
"obs" = map(
.x = data,
~ .x$presence),
"pred" = map(
.x = data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence")),
"auc" = map2_dbl(
.x = obs,
.y = pred,
~ roc_auc_vec(
estimator = "binary",
truth = .x,
estimate = .y)),
"climate_data" = map(
.x = raster_stacks,
~ as(.x, "SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit()),
"habitat_suitability" = map(
.x = climate_data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence"))
)
df_eval
# remove cells with missing values in any decade
# (otherwise mismatch causes animation glitches)
no_na_data <- df_eval %>%
dplyr::select(decade, climate_data, habitat_suitability) %>%
# change nesting
unnest() %>% group_by(x, y) %>% nest() %>%
# find cells with missing values
mutate(any_na = map_lgl(
.x = data,
~ dim(.x)[[1]] == 5)) %>%
# exclude them
filter(any_na) %>%
dplyr::select(x, y, data) %>%
unnest()
# create animation cycling through decades
hs_animation <- no_na_data %>%
dplyr::select(x, y, decade, habitat_suitability) %>%
gather(key = "variable", value = "value", -x, -y, -decade) %>%
filter(variable == "habitat_suitability") %>%
# plot data
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
# good colour palette for colour blind people
scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
# animate plot, morphing through decades
transition_states(
states = decade,
transition_length = 5,
state_length = 2) +
labs(title = 'Habitat Suitability per Decade',
# gganimate: animate subtitle
subtitle = 'Decade: {closest_state}',
caption = 'Source:\nGBIF data and\nMetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
hs_animation
model_fit <- update(
object = model_fit,
param = list(mtry = 6, coefReg = 0, coefImp = .6))
df_eval <- df_modelling %>%
group_by(decade) %>% nest() %>%
# combine with climate data
left_join(climate_nested, by = "decade") %>%
# evaluate by decade
mutate(
"obs" = map(
.x = data,
~ .x$presence),
"pred" = map(
.x = data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence")),
"auc" = map2_dbl(
.x = obs,
.y = pred,
~ roc_auc_vec(
estimator = "binary",
truth = .x,
estimate = .y)),
"climate_data" = map(
.x = raster_stacks,
~ as(.x, "SpatialPixelsDataFrame") %>%
as_data_frame() %>%
na.omit()),
"habitat_suitability" = map(
.x = climate_data,
~ predict(model_fit, newdata = .x, type = "prob") %>% pull("presence"))
)
df_eval
# remove cells with missing values in any decade
# (otherwise mismatch causes animation glitches)
no_na_data <- df_eval %>%
dplyr::select(decade, climate_data, habitat_suitability) %>%
# change nesting
unnest() %>% group_by(x, y) %>% nest() %>%
# find cells with missing values
mutate(any_na = map_lgl(
.x = data,
~ dim(.x)[[1]] == 5)) %>%
# exclude them
filter(any_na) %>%
dplyr::select(x, y, data) %>%
unnest()
# create animation cycling through decades
hs_animation <- no_na_data %>%
dplyr::select(x, y, decade, habitat_suitability) %>%
gather(key = "variable", value = "value", -x, -y, -decade) %>%
filter(variable == "habitat_suitability") %>%
# plot data
ggplot(aes(x = x, y = y, fill = value)) +
geom_tile() +
# good colour palette for colour blind people
scale_fill_viridis(option = "A") +
coord_equal() +
theme_map() +
theme(legend.position = "bottom") +
# animate plot, morphing through decades
transition_states(
states = decade,
transition_length = 5,
state_length = 2) +
labs(title = 'Habitat Suitability per Decade',
# gganimate: animate subtitle
subtitle = 'Decade: {closest_state}',
caption = 'Source:\nGBIF data and\nMetOffice UK climate data',
fill = 'Habitat Suitability [0 low - high 1]')
hs_animation
hs_animation
