install.packages("remoter")
remotes::install_github("cloudyr/aws.ec2")
aws_ami <- "ami-0226a17550499097a"
aws.signature::locate_credentials()
aws_ami <- "ami-0226a17550499097a"
aws_describe <- describe_images(aws_ami)
#remotes::install_github("cloudyr/aws.ec2")
library(aws.ec2)
library(remoter)
aws.signature::locate_credentials()
aws_ami <- "ami-0226a17550499097a"
aws_describe <- describe_images(aws_ami)
usethis::edit_r_environ()
aws_credentials <- aws.signature::locate_credentials()
aws_credentials
Sys.setenv(
"AWS_ACCESS_KEY_ID" = aws_credentials$key,
"AWS_SECRET_ACCESS_KEY" = aws_credentials$secret,
"AWS_DEFAULT_REGION" = "us-east-1"
)
aws_describe <- describe_images(aws_ami)
aws_describe <- describe_images(aws_ami)
aws_ami <- "ami-0226a175"
aws_describe <- describe_images(aws_ami)
s <- describe_subnets()
g <- describe_sgroups()
s
g
aws_ami <- "ami-0226a17550499097a"
# Launch the instance using appropriate settings
i <- run_instances(image = image,
type = "t2.micro",
subnet = s[[1]],
sgroup = g[[1]])
?run_instances
# Launch the instance using appropriate settings
i <- run_instances(image = aws_ami,
type = "t2.micro",
subnet = s[[1]],
sgroup = g[[1]])
locate_credentials()
aws.signature::locate_credentials()
#remotes::install_github("cloudyr/aws.ec2")
library(aws.ec2)
library(remoter)
aws_ami <- "ami-0226a17550499097a"
aws_credentials <- aws.signature::locate_credentials()
Sys.setenv(
"AWS_ACCESS_KEY_ID" = aws_credentials$key,
"AWS_SECRET_ACCESS_KEY" = aws_credentials$secret,
"AWS_DEFAULT_REGION" = "us-east-1"
)
aws_describe <- describe_images(aws_ami)
aws_credentials <- aws.signature::locate_credentials()
aws_credentials
#remotes::install_github("cloudyr/aws.ec2")
library(aws.ec2)
library(remoter)
aws_ami <- "ami-0226a17550499097a"
aws.signature::locate_credentials()
Sys.setenv(
"AWS_ACCESS_KEY_ID" = aws_credentials$key,
"AWS_SECRET_ACCESS_KEY" = aws_credentials$secret,
"AWS_DEFAULT_REGION" = "eu-west-2"
)
aws_credentials <- aws.signature::locate_credentials()
Sys.setenv(
"AWS_ACCESS_KEY_ID" = aws_credentials$key,
"AWS_SECRET_ACCESS_KEY" = aws_credentials$secret,
"AWS_DEFAULT_REGION" = "eu-west-2"
)
aws.signature::locate_credentials()
aws_describe <- describe_images(aws_ami)
aws_describe
s <- describe_subnets()
g <- describe_sgroups()
# Launch the instance using appropriate settings
i <- run_instances(image = aws_ami,
type = "t2.micro",
subnet = s[[1]],
sgroup = g[[1]])
i
i$item$dnsName
instance_ip <- get_instance_public_ip(i)
instance_ip
#remotes::install_github("cloudyr/aws.ec2")
library(aws.ec2)
library(remoter)
library(ssh)
#remotes::install_github("cloudyr/aws.ec2")
library(aws.ec2)
library(ssh)
library(remoter)
# get local aws credentials
aws_credentials <- aws.signature::locate_credentials()
Sys.setenv(
"AWS_ACCESS_KEY_ID" = aws_credentials$key,
"AWS_SECRET_ACCESS_KEY" = aws_credentials$secret,
"AWS_DEFAULT_REGION" = "eu-west-2"
)
# double-check region if this doesn't work
aws_ami <- "ami-0226a17550499097a"
aws_describe <- describe_images(aws_ami)
# Check your VPC and Security Group settings
subnets <- describe_subnets()
my_sg <- create_sgroup("r-ec2-sg", "Allow my IP", vpc = subnets[[1L]])
# use existing ip address or create a new one
ips <- describe_ips()
if (!length(ips)) {
ips[[1L]] <- allocate_ip("vpc")
}
s <- describe_subnets()
g <- describe_sgroups()
# Launch the instance using appropriate settings
i <- run_instances(image = aws_ami,
type = "t2.micro",
subnet = s[[1]],
sgroup = g[[1]])
Sys.sleep(5L) # wait for instance to boot
# associate IP address with instance
instance_ip <- get_instance_public_ip(i)
if (is.na(instance_ip)) {
instance_ip <- associate_ip(i, ips[[1L]])$publicIp
}
# authorize access from this IP
try(authorize_ingress(my_sg))
try(authorize_egress(my_sg))
instance_ip
system("whoami")
# start remoter::server on instance
username <- system("whoami")
session <- ssh_connect(
host = instance_ip,
verbose = 2
)
con <- session <- ssh_connect(
host = instance_ip,
verbose = 2
)
# start remoter::server on instance
username <- system("whoami")
con <- session <- ssh_connect(
host = paste(username, instance_ip, sep = "@"),
verbose = 2
)
list.files("~/.ssh/id_dsa.pub")
list.files("~/.ssh/")
con <- session <- ssh_connect(
host = paste(username, instance_ip, sep = "@"),
keyfile = "~/.ssh/id_rsa.pub",
verbose = 2,
)
list.files("~/.ssh/id_rsa.pub")
list.files("~/.ssh/id_rsa")
list.files("~/.ssh
list.files("~/.ssh")
list.files("~/.ssh/id")
list.files("~/.ssh/")
list.files("~/.ssh/id_rsa.pub")
con <- session <- ssh_connect(
host = paste(username, instance_ip, sep = "@"),
keyfile = "~/.ssh/id_rsa.pub",
verbose = 2
)
# start remoter::server on instance
username <- system("whoami")
con <- session <- ssh_connect(
host = paste(username, instance_ip, sep = "@"),
keyfile = "~/.ssh/id_rsa",
verbose = 2
)
con <- session <- ssh_connect(
host = instance_ip, #paste(username, instance_ip, sep = "@"),
keyfile = "~/.ssh/id_rsa",
verbose = 2
)
con <- session <- ssh_connect(
host = instance_ip,
keyfile = "~/.ssh/id_rsa",
verbose = 1
)
# start remoter::server on instance
username <- system("whoami")
con <- session <- ssh_connect(
host = instance_ip,
keyfile = "~/.ssh/id_rsa",
verbose = 1
)
con <- session <- ssh_connect(
host = instance_ip,
keyfile = "~/.ssh/id_rsa",
verbose = 1
)
con <- session <- ssh_connect(
host = paste(username, instance_ip, sep = "@"),
keyfile = "~/.ssh/id_rsa",
verbose = 2
)
# start remoter::server on instance
username <- system("whoami")
con <- ssh_connect(
host = paste(username, instance_ip, sep = "@"),
keyfile = "~/.ssh/id_rsa",
verbose = 2
)
## stop and terminate the instance
stop_instances(i[[1L]])
# double-check region if this doesn't work
aws_ami <- "ami-0226a17550499097a"
aws_describe <- describe_images(aws_ami)
# Check your VPC and Security Group settings
subnets <- describe_subnets()
my_sg <- create_sgroup("r-ec2-sg", "Allow my IP", vpc = subnets[[1L]])
# use existing ip address or create a new one
ips <- describe_ips()
if (!length(ips)) {
ips[[1L]] <- allocate_ip("vpc")
}
s <- describe_subnets()
g <- describe_sgroups()
# Launch the instance using appropriate settings
i <- run_instances(image = aws_ami,
type = "t2.micro",
subnet = s[[1]],
sgroup = g[[1]])
Sys.sleep(5L) # wait for instance to boot
# associate IP address with instance
instance_ip <- get_instance_public_ip(i)
instance_ip
if (is.na(instance_ip)) {
instance_ip <- associate_ip(i, ips[[1L]])$publicIp
}
# authorize access from this IP
try(authorize_ingress(my_sg))
try(authorize_egress(my_sg))
library(reticulate)
repl_python()
